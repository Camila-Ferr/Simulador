Qiskit
def circuit_g():
  q = QuantumRegister(5, 'qubit') #quibits
  c = ClassicalRegister(6, 'bit') #q clássico
  cir = QuantumCircuit(q, c) #circuito

  for i in range(5):
      cir.h(q[i])

  #Oráculo
  cir.h(q[3])
  cir.x(q[4])
  cir.h(q[0])
  cir.h(q[1])
  cir.h(q[4])
  cir.ccx(q[0], q[1], q[2])
  cir.ccx(q[2], q[3], q[4])
  cir.ccx(q[0], q[1], q[2])
  #Inversão sobre a média
  cir.h(q[0])
  cir.h(q[1])
  cir.h(q[3])
  cir.x(q[0])
  cir.x(q[1])
  cir.x(q[3])
  cir.ccx(q[0], q[1], q[2])
  cir.x(q[0])
  cir.x(q[1])
  cir.ccx(q[2], q[3], q[4])
  cir.x(q[0])
  cir.x(q[1])
  cir.x(q[3])
  cir.ccx(q[0], q[1], q[2])
  cir.x(q[0])
  cir.x(q[1])
  cir.h(q[0])
  cir.h(q[1])
  cir.h(q[3])

  cir.measure(q[0], c[0])
  cir.measure(q[1], c[1])
  cir.measure(q[3], c[2])

  print (cir)
  #cir.draw(output='mpl').savefig('test.png')
  return cir
